<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initalize Variables
grav = 0.5;
vsp = 0;
hsp = 0;
jumpspeed = 7;
movespeed = 0.3;
key_down = 0;
maxmovespeed = 5;
global.face = 1;
stamina = 100;
maxstamina = 100;
is_sprinting = false;










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls and Movement
//Get player input
key_right = keyboard_check(ord('D'));
key_left = keyboard_check(ord('A'));
key_down = keyboard_check(ord('S'));
key_jump = keyboard_check_pressed(vk_space);

// React to player input
// Inertia Mechanic
if (hspeed &lt; maxmovespeed)
{
    if (key_right = 1)
    {
        motion_add(0,movespeed)
    }
}
if (hspeed &gt; -maxmovespeed)
{
    if (key_left = 1)
    {
        motion_add(0,-movespeed)
    }
}
if (hspeed &gt;= maxmovespeed)
{
    if (key_right = 1)
    {
        motion_add(0,-movespeed)
    }
}
if (hspeed &lt;= -maxmovespeed)
{
     if (key_left = 1)
    {
        motion_add(0,movespeed)
    }
}
if (key_right = 0)
{
    if (key_left = 0)
    {
        if (hspeed &gt; 0)
        {
            motion_add(0,-movespeed)
        }
        if (hspeed &lt; 0)
        {
            motion_add(0,movespeed)
        }
        if (hspeed = 0)
        {
            motion_set(0,0)
        }
    }
}

//Sprint
if (keyboard_check(vk_shift) &amp;&amp; stamina &gt;0)
    {
    maxmovespeed = 3;
    stamina = stamina-1
    }
    else
    {
    maxmovespeed = 1;
    if (stamina &lt; maxstamina)
    {
        stamina = stamina + 0.5
    }
}
//Jump Mechanic
if (vsp &lt; 10) vsp += grav;
if (place_meeting(x,y+1,obj_wall))
{
    if (key_jump) 
    vsp = -jumpspeed
}

//Dodge

if (keyboard_check_pressed(vk_alt)&amp;&amp; keyboard_check(ord('D')))
    {
        instance_destroy();
        instance_create(x,y,obj_player_roll);
        global.face = 1;
        
    }
if (keyboard_check_pressed(vk_alt)&amp;&amp; keyboard_check(ord('A')))
    {
        instance_destroy();
        instance_create(x,y,obj_player_roll);
        global.face = 0;
        
    }
    
//Horizontal Collision
if (place_meeting(x + hspeed,y,obj_wall))
{
    while(!place_meeting(x + sign(hspeed),y,obj_wall))
    {
        x += sign(hspeed);
    }
    hspeed = 0;
}
x += hsp;
//Vertical Collision
if (place_meeting(x,y + vsp,obj_wall))
{
    while(!place_meeting(x,y + sign(vsp),obj_wall))
   {
        y += sign(vsp);
    }
    vsp = 0
}
y += vsp;

//face check for animations
if (hspeed &gt; 0) {
    global.face = 1; //right
} else if (hspeed &lt; 0) {
    global.face = 0; //left
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations
if (global.face = 1) 
    {
    image_xscale = 1;
    }
else if (global.face = 0) 
    {
    image_xscale = -1;
    }

/*
if (keyboard_check(ord('D')) &amp;&amp; hspeed &lt; 0.6 &amp;&amp; hspeed &gt; 0)
{
    sprite_index = spr_player_turn;
    image_speed = 1
}

else if (keyboard_check_pressed(ord('A')) &amp;&amp; hspeed &gt; -0.6 &amp;&amp; hspeed &lt; 0)
{
    sprite_index = spr_player_turn;
    image_speed = 1
}
*/

if (keyboard_check_direct(mb_right))
    {
        sprite_index = spr_player_idle_pistol;
     
    }
  
else if (keyboard_check_direct(mb_right) &amp;&amp; hspeed &gt; 0)
    {
        sprite_index = spr_player_walk_pistol;
    }



if (hspeed = 0 &amp;&amp; is_sprinting = false &amp;&amp; !keyboard_check_direct(mb_right))
    {
    sprite_index = spr_player_idle;
    }
    
else if (hspeed &gt; 0.8 || hspeed &lt; -0.8 &amp;&amp; is_sprinting = false &amp;&amp; !keyboard_check_direct(mb_right))
    {
    sprite_index = spr_player_walk;
    image_speed = 0.15;
    }

    
if (is_sprinting = true &amp;&amp; (hspeed &lt;= 3 || hspeed &gt;= -3) &amp;&amp;!keyboard_check_direct(mb_right))
    {
    sprite_index = spr_player_stop;
    image_speed = 0.25;
    }
     
else if (hspeed &gt; 1 &amp;&amp; hspeed &lt;= 3 || hspeed &lt; -1 &amp;&amp; hspeed &gt;= -3)
    {
    sprite_index = spr_player_sprint;
    image_speed = 0.15;
        if ((keyboard_check_released(vk_shift) || keyboard_check_released(ord('A'))|| keyboard_check_released(ord('D'))) &amp;&amp; (hspeed &gt; 0 || hspeed &lt; 0))
        {
        is_sprinting = true;
        }
    }
    
if (vsp &lt; 0)
    {
    sprite_index = spr_player_jump;
    }
    
else if (vsp &gt;= 0 &amp;&amp; (!place_meeting(x, y+1, obj_wall)))
    {
    sprite_index = spr_player_fall;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sounds
//if (key_right = 1 || key_left = 1) {
//    audio_play_sound(snd_footsteps, 10, false);
//};
//else {
//    audio_stop_sound(snd_footsteps);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death and Respawn
room_goto(rm_dead);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = spr_player_stop)
    {
    is_sprinting = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_deactivate_object(obj_player);
room_goto(rm_dead);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stamina bar
draw_healthbar(view_xview[1] + 100, view_yview[1] + 10,view_xview[1] - 100, view_yview[1] - 10, stamina, c_black, c_red, c_lime, 1, true, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
